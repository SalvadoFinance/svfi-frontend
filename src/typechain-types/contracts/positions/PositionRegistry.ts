/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace PositionTypes {
  export type PositionStruct = {
    id: PromiseOrValue<BigNumberish>;
    owner: PromiseOrValue<string>;
    strategy: PromiseOrValue<string>;
    from: PromiseOrValue<string>;
    to: PromiseOrValue<string>;
    amount: PromiseOrValue<BigNumberish>;
    interval: PromiseOrValue<BigNumberish>;
    slippage: PromiseOrValue<BigNumberish>;
    priceLimit: PromiseOrValue<BigNumberish>;
    firstTime: PromiseOrValue<BigNumberish>;
    createTime: PromiseOrValue<BigNumberish>;
    endTime: PromiseOrValue<BigNumberish>;
    status: PromiseOrValue<BigNumberish>;
    params: PromiseOrValue<BytesLike>;
  };

  export type PositionStructOutput = [
    BigNumber,
    string,
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    number,
    string
  ] & {
    id: BigNumber;
    owner: string;
    strategy: string;
    from: string;
    to: string;
    amount: BigNumber;
    interval: BigNumber;
    slippage: BigNumber;
    priceLimit: BigNumber;
    firstTime: BigNumber;
    createTime: BigNumber;
    endTime: BigNumber;
    status: number;
    params: string;
  };

  export type PositionExecutedStruct = {
    investedPeriodNums: PromiseOrValue<BigNumberish>;
    cumulativeAmountIn: PromiseOrValue<BigNumberish>;
    cumulativeAmountOut: PromiseOrValue<BigNumberish>;
    nextInvestDate: PromiseOrValue<BigNumberish>;
    params: PromiseOrValue<BytesLike>;
  };

  export type PositionExecutedStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string
  ] & {
    investedPeriodNums: BigNumber;
    cumulativeAmountIn: BigNumber;
    cumulativeAmountOut: BigNumber;
    nextInvestDate: BigNumber;
    params: string;
  };
}

export interface PositionRegistryInterface extends utils.Interface {
  functions: {
    "controllerManager()": FunctionFragment;
    "createPosition(bytes32,(uint256,address,address,address,address,uint256,uint128,uint256,uint256,uint256,uint256,uint256,uint8,bytes))": FunctionFragment;
    "editPosition(bytes32,uint256,uint256,uint128,uint256,uint256,bytes)": FunctionFragment;
    "executePosition(bytes32,address,uint256,uint256,uint256,bytes)": FunctionFragment;
    "executedPositionOf(bytes32)": FunctionFragment;
    "isLivePosition(bytes32)": FunctionFragment;
    "positionOf(bytes32)": FunctionFragment;
    "rotatePosition(bytes32,uint8)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "controllerManager"
      | "createPosition"
      | "editPosition"
      | "executePosition"
      | "executedPositionOf"
      | "isLivePosition"
      | "positionOf"
      | "rotatePosition"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "controllerManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createPosition",
    values: [PromiseOrValue<BytesLike>, PositionTypes.PositionStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "editPosition",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "executePosition",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "executedPositionOf",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "isLivePosition",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "positionOf",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "rotatePosition",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "controllerManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "editPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executedPositionOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isLivePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "positionOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rotatePosition",
    data: BytesLike
  ): Result;

  events: {
    "PositionAmountUpdated(bytes32,uint256)": EventFragment;
    "PositionCreated(address,address,uint256,address,address,uint256,uint128,uint256,uint256,uint256,uint256,uint256,bytes)": EventFragment;
    "PositionEndTimeUpdated(bytes32,uint256)": EventFragment;
    "PositionExecuted(bytes32,address,uint256,uint256,uint256,bytes)": EventFragment;
    "PositionFirstTimeUpdated(bytes32,uint256)": EventFragment;
    "PositionIntervalUpdated(bytes32,uint128)": EventFragment;
    "PositionParamsUpdated(bytes32,bytes)": EventFragment;
    "PositionRotated(bytes32,uint256)": EventFragment;
    "PositionSlippageUpdated(bytes32,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "PositionAmountUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PositionCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PositionEndTimeUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PositionExecuted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PositionFirstTimeUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PositionIntervalUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PositionParamsUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PositionRotated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PositionSlippageUpdated"): EventFragment;
}

export interface PositionAmountUpdatedEventObject {
  positionId: string;
  amount: BigNumber;
}
export type PositionAmountUpdatedEvent = TypedEvent<
  [string, BigNumber],
  PositionAmountUpdatedEventObject
>;

export type PositionAmountUpdatedEventFilter =
  TypedEventFilter<PositionAmountUpdatedEvent>;

export interface PositionCreatedEventObject {
  owner: string;
  strategy: string;
  id: BigNumber;
  from: string;
  to: string;
  amount: BigNumber;
  interval: BigNumber;
  slippage: BigNumber;
  priceLimit: BigNumber;
  firstTime: BigNumber;
  createTime: BigNumber;
  endTime: BigNumber;
  params: string;
}
export type PositionCreatedEvent = TypedEvent<
  [
    string,
    string,
    BigNumber,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string
  ],
  PositionCreatedEventObject
>;

export type PositionCreatedEventFilter = TypedEventFilter<PositionCreatedEvent>;

export interface PositionEndTimeUpdatedEventObject {
  positionId: string;
  endTime: BigNumber;
}
export type PositionEndTimeUpdatedEvent = TypedEvent<
  [string, BigNumber],
  PositionEndTimeUpdatedEventObject
>;

export type PositionEndTimeUpdatedEventFilter =
  TypedEventFilter<PositionEndTimeUpdatedEvent>;

export interface PositionExecutedEventObject {
  positionId: string;
  exchange: string;
  amountIn: BigNumber;
  amountOut: BigNumber;
  nextDate: BigNumber;
  params: string;
}
export type PositionExecutedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber, string],
  PositionExecutedEventObject
>;

export type PositionExecutedEventFilter =
  TypedEventFilter<PositionExecutedEvent>;

export interface PositionFirstTimeUpdatedEventObject {
  positionId: string;
  firstTime: BigNumber;
}
export type PositionFirstTimeUpdatedEvent = TypedEvent<
  [string, BigNumber],
  PositionFirstTimeUpdatedEventObject
>;

export type PositionFirstTimeUpdatedEventFilter =
  TypedEventFilter<PositionFirstTimeUpdatedEvent>;

export interface PositionIntervalUpdatedEventObject {
  positionId: string;
  interval: BigNumber;
}
export type PositionIntervalUpdatedEvent = TypedEvent<
  [string, BigNumber],
  PositionIntervalUpdatedEventObject
>;

export type PositionIntervalUpdatedEventFilter =
  TypedEventFilter<PositionIntervalUpdatedEvent>;

export interface PositionParamsUpdatedEventObject {
  positionId: string;
  params: string;
}
export type PositionParamsUpdatedEvent = TypedEvent<
  [string, string],
  PositionParamsUpdatedEventObject
>;

export type PositionParamsUpdatedEventFilter =
  TypedEventFilter<PositionParamsUpdatedEvent>;

export interface PositionRotatedEventObject {
  positionId: string;
  status: BigNumber;
}
export type PositionRotatedEvent = TypedEvent<
  [string, BigNumber],
  PositionRotatedEventObject
>;

export type PositionRotatedEventFilter = TypedEventFilter<PositionRotatedEvent>;

export interface PositionSlippageUpdatedEventObject {
  positionId: string;
  slippage: BigNumber;
}
export type PositionSlippageUpdatedEvent = TypedEvent<
  [string, BigNumber],
  PositionSlippageUpdatedEventObject
>;

export type PositionSlippageUpdatedEventFilter =
  TypedEventFilter<PositionSlippageUpdatedEvent>;

export interface PositionRegistry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PositionRegistryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    controllerManager(overrides?: CallOverrides): Promise<[string]>;

    createPosition(
      positionId: PromiseOrValue<BytesLike>,
      position: PositionTypes.PositionStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    editPosition(
      positionId: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      slippage: PromiseOrValue<BigNumberish>,
      interval: PromiseOrValue<BigNumberish>,
      firstTime: PromiseOrValue<BigNumberish>,
      endTime: PromiseOrValue<BigNumberish>,
      params: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    executePosition(
      positionId: PromiseOrValue<BytesLike>,
      exchange: PromiseOrValue<string>,
      amountIn: PromiseOrValue<BigNumberish>,
      amountOut: PromiseOrValue<BigNumberish>,
      nextTime: PromiseOrValue<BigNumberish>,
      params: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    executedPositionOf(
      positionId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[PositionTypes.PositionExecutedStructOutput]>;

    isLivePosition(
      positionId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    positionOf(
      positionId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[PositionTypes.PositionStructOutput]>;

    rotatePosition(
      positionId: PromiseOrValue<BytesLike>,
      status: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  controllerManager(overrides?: CallOverrides): Promise<string>;

  createPosition(
    positionId: PromiseOrValue<BytesLike>,
    position: PositionTypes.PositionStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  editPosition(
    positionId: PromiseOrValue<BytesLike>,
    amount: PromiseOrValue<BigNumberish>,
    slippage: PromiseOrValue<BigNumberish>,
    interval: PromiseOrValue<BigNumberish>,
    firstTime: PromiseOrValue<BigNumberish>,
    endTime: PromiseOrValue<BigNumberish>,
    params: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  executePosition(
    positionId: PromiseOrValue<BytesLike>,
    exchange: PromiseOrValue<string>,
    amountIn: PromiseOrValue<BigNumberish>,
    amountOut: PromiseOrValue<BigNumberish>,
    nextTime: PromiseOrValue<BigNumberish>,
    params: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  executedPositionOf(
    positionId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<PositionTypes.PositionExecutedStructOutput>;

  isLivePosition(
    positionId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  positionOf(
    positionId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<PositionTypes.PositionStructOutput>;

  rotatePosition(
    positionId: PromiseOrValue<BytesLike>,
    status: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    controllerManager(overrides?: CallOverrides): Promise<string>;

    createPosition(
      positionId: PromiseOrValue<BytesLike>,
      position: PositionTypes.PositionStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    editPosition(
      positionId: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      slippage: PromiseOrValue<BigNumberish>,
      interval: PromiseOrValue<BigNumberish>,
      firstTime: PromiseOrValue<BigNumberish>,
      endTime: PromiseOrValue<BigNumberish>,
      params: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    executePosition(
      positionId: PromiseOrValue<BytesLike>,
      exchange: PromiseOrValue<string>,
      amountIn: PromiseOrValue<BigNumberish>,
      amountOut: PromiseOrValue<BigNumberish>,
      nextTime: PromiseOrValue<BigNumberish>,
      params: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    executedPositionOf(
      positionId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PositionTypes.PositionExecutedStructOutput>;

    isLivePosition(
      positionId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    positionOf(
      positionId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PositionTypes.PositionStructOutput>;

    rotatePosition(
      positionId: PromiseOrValue<BytesLike>,
      status: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "PositionAmountUpdated(bytes32,uint256)"(
      positionId?: PromiseOrValue<BytesLike> | null,
      amount?: null
    ): PositionAmountUpdatedEventFilter;
    PositionAmountUpdated(
      positionId?: PromiseOrValue<BytesLike> | null,
      amount?: null
    ): PositionAmountUpdatedEventFilter;

    "PositionCreated(address,address,uint256,address,address,uint256,uint128,uint256,uint256,uint256,uint256,uint256,bytes)"(
      owner?: PromiseOrValue<string> | null,
      strategy?: null,
      id?: null,
      from?: null,
      to?: null,
      amount?: null,
      interval?: null,
      slippage?: null,
      priceLimit?: null,
      firstTime?: null,
      createTime?: null,
      endTime?: null,
      params?: null
    ): PositionCreatedEventFilter;
    PositionCreated(
      owner?: PromiseOrValue<string> | null,
      strategy?: null,
      id?: null,
      from?: null,
      to?: null,
      amount?: null,
      interval?: null,
      slippage?: null,
      priceLimit?: null,
      firstTime?: null,
      createTime?: null,
      endTime?: null,
      params?: null
    ): PositionCreatedEventFilter;

    "PositionEndTimeUpdated(bytes32,uint256)"(
      positionId?: PromiseOrValue<BytesLike> | null,
      endTime?: null
    ): PositionEndTimeUpdatedEventFilter;
    PositionEndTimeUpdated(
      positionId?: PromiseOrValue<BytesLike> | null,
      endTime?: null
    ): PositionEndTimeUpdatedEventFilter;

    "PositionExecuted(bytes32,address,uint256,uint256,uint256,bytes)"(
      positionId?: PromiseOrValue<BytesLike> | null,
      exchange?: null,
      amountIn?: null,
      amountOut?: null,
      nextDate?: null,
      params?: null
    ): PositionExecutedEventFilter;
    PositionExecuted(
      positionId?: PromiseOrValue<BytesLike> | null,
      exchange?: null,
      amountIn?: null,
      amountOut?: null,
      nextDate?: null,
      params?: null
    ): PositionExecutedEventFilter;

    "PositionFirstTimeUpdated(bytes32,uint256)"(
      positionId?: PromiseOrValue<BytesLike> | null,
      firstTime?: null
    ): PositionFirstTimeUpdatedEventFilter;
    PositionFirstTimeUpdated(
      positionId?: PromiseOrValue<BytesLike> | null,
      firstTime?: null
    ): PositionFirstTimeUpdatedEventFilter;

    "PositionIntervalUpdated(bytes32,uint128)"(
      positionId?: PromiseOrValue<BytesLike> | null,
      interval?: null
    ): PositionIntervalUpdatedEventFilter;
    PositionIntervalUpdated(
      positionId?: PromiseOrValue<BytesLike> | null,
      interval?: null
    ): PositionIntervalUpdatedEventFilter;

    "PositionParamsUpdated(bytes32,bytes)"(
      positionId?: PromiseOrValue<BytesLike> | null,
      params?: null
    ): PositionParamsUpdatedEventFilter;
    PositionParamsUpdated(
      positionId?: PromiseOrValue<BytesLike> | null,
      params?: null
    ): PositionParamsUpdatedEventFilter;

    "PositionRotated(bytes32,uint256)"(
      positionId?: PromiseOrValue<BytesLike> | null,
      status?: null
    ): PositionRotatedEventFilter;
    PositionRotated(
      positionId?: PromiseOrValue<BytesLike> | null,
      status?: null
    ): PositionRotatedEventFilter;

    "PositionSlippageUpdated(bytes32,uint256)"(
      positionId?: PromiseOrValue<BytesLike> | null,
      slippage?: null
    ): PositionSlippageUpdatedEventFilter;
    PositionSlippageUpdated(
      positionId?: PromiseOrValue<BytesLike> | null,
      slippage?: null
    ): PositionSlippageUpdatedEventFilter;
  };

  estimateGas: {
    controllerManager(overrides?: CallOverrides): Promise<BigNumber>;

    createPosition(
      positionId: PromiseOrValue<BytesLike>,
      position: PositionTypes.PositionStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    editPosition(
      positionId: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      slippage: PromiseOrValue<BigNumberish>,
      interval: PromiseOrValue<BigNumberish>,
      firstTime: PromiseOrValue<BigNumberish>,
      endTime: PromiseOrValue<BigNumberish>,
      params: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    executePosition(
      positionId: PromiseOrValue<BytesLike>,
      exchange: PromiseOrValue<string>,
      amountIn: PromiseOrValue<BigNumberish>,
      amountOut: PromiseOrValue<BigNumberish>,
      nextTime: PromiseOrValue<BigNumberish>,
      params: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    executedPositionOf(
      positionId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isLivePosition(
      positionId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    positionOf(
      positionId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rotatePosition(
      positionId: PromiseOrValue<BytesLike>,
      status: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    controllerManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    createPosition(
      positionId: PromiseOrValue<BytesLike>,
      position: PositionTypes.PositionStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    editPosition(
      positionId: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      slippage: PromiseOrValue<BigNumberish>,
      interval: PromiseOrValue<BigNumberish>,
      firstTime: PromiseOrValue<BigNumberish>,
      endTime: PromiseOrValue<BigNumberish>,
      params: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    executePosition(
      positionId: PromiseOrValue<BytesLike>,
      exchange: PromiseOrValue<string>,
      amountIn: PromiseOrValue<BigNumberish>,
      amountOut: PromiseOrValue<BigNumberish>,
      nextTime: PromiseOrValue<BigNumberish>,
      params: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    executedPositionOf(
      positionId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isLivePosition(
      positionId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    positionOf(
      positionId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rotatePosition(
      positionId: PromiseOrValue<BytesLike>,
      status: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
