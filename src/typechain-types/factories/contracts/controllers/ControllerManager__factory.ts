/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  ControllerManager,
  ControllerManagerInterface,
} from "../../../contracts/controllers/ControllerManager";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "controller",
        type: "address",
      },
    ],
    name: "ControllerRemoved",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "controller",
        type: "address",
      },
    ],
    name: "ControllerWhitelisted",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "controller",
        type: "address",
      },
    ],
    name: "addController",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "controller",
        type: "address",
      },
    ],
    name: "isControllerWhitelisted",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "controller",
        type: "address",
      },
    ],
    name: "removeController",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "viewCountWhitelistedControllers",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "cursor",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "size",
        type: "uint256",
      },
    ],
    name: "viewWhitelistedControllers",
    outputs: [
      {
        internalType: "address[]",
        name: "",
        type: "address[]",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061001a3361001f565b61006f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6109e58061007e6000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c80638da5cb5b1161005b5780638da5cb5b146100fa578063a7fc7a0714610122578063f2fde38b14610135578063f6a74ed71461014857600080fd5b8063346b4bfe1461008d57806334b169ee146100b7578063715018a6146100cd5780637387c4e7146100d7575b600080fd5b6100a061009b3660046107d6565b61015b565b6040516100ae9291906107f8565b60405180910390f35b6100bf61025d565b6040519081526020016100ae565b6100d561026e565b005b6100ea6100e5366004610856565b610282565b60405190151581526020016100ae565b60005460405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100ae565b6100d5610130366004610856565b610295565b6100d5610143366004610856565b610364565b6100d5610156366004610856565b61041b565b60606000828461016b60016104e4565b61017591906108bb565b811115610194578461018760016104e4565b61019191906108bb565b90505b60008167ffffffffffffffff8111156101af576101af6108d2565b6040519080825280602002602001820160405280156101d8578160200160208202803683370190505b50905060005b82811015610244576101fb6101f38289610901565b6001906104ee565b82828151811061020d5761020d610919565b73ffffffffffffffffffffffffffffffffffffffff909216602092830291909101909101528061023c81610948565b9150506101de565b50806102508388610901565b9350935050509250929050565b600061026960016104e4565b905090565b610276610501565b6102806000610582565b565b600061028f6001836105f7565b92915050565b61029d610501565b6102a86001826105f7565b15610314576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f436f6e74726f6c6c65723a20616c72656164792077686974656c69737465640060448201526064015b60405180910390fd5b61031f600182610626565b5060405173ffffffffffffffffffffffffffffffffffffffff8216907fd8f93f7c27308e6c576397c27c08db63bae8de7b3f7a25fd422f3a6f8ba6934290600090a250565b61036c610501565b73ffffffffffffffffffffffffffffffffffffffff811661040f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161030b565b61041881610582565b50565b610423610501565b61042e6001826105f7565b610494576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f436f6e74726f6c6c65723a206e6f742077686974656c69737465640000000000604482015260640161030b565b61049f600182610648565b5060405173ffffffffffffffffffffffffffffffffffffffff8216907f33d83959be2573f5453b12eb9d43b3499bc57d96bd2f067ba44803c859e8111390600090a250565b600061028f825490565b60006104fa838361066a565b9392505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610280576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161030b565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260018301602052604081205415156104fa565b60006104fa8373ffffffffffffffffffffffffffffffffffffffff8416610694565b60006104fa8373ffffffffffffffffffffffffffffffffffffffff84166106e3565b600082600001828154811061068157610681610919565b9060005260206000200154905092915050565b60008181526001830160205260408120546106db5750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915561028f565b50600061028f565b600081815260018301602052604081205480156107cc5760006107076001836108bb565b855490915060009061071b906001906108bb565b905081811461078057600086600001828154811061073b5761073b610919565b906000526020600020015490508087600001848154811061075e5761075e610919565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061079157610791610980565b60019003818190600052602060002001600090559055856001016000868152602001908152602001600020600090556001935050505061028f565b600091505061028f565b600080604083850312156107e957600080fd5b50508035926020909101359150565b604080825283519082018190526000906020906060840190828701845b8281101561084757815173ffffffffffffffffffffffffffffffffffffffff1684529284019290840190600101610815565b50505092019290925292915050565b60006020828403121561086857600080fd5b813573ffffffffffffffffffffffffffffffffffffffff811681146104fa57600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000828210156108cd576108cd61088c565b500390565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600082198211156109145761091461088c565b500190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036109795761097961088c565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fdfea2646970667358221220ff932e0c325c17771ca071993c67981d8e4652323e84b9d8e290bd88903f3f5164736f6c634300080d0033";

type ControllerManagerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ControllerManagerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ControllerManager__factory extends ContractFactory {
  constructor(...args: ControllerManagerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ControllerManager> {
    return super.deploy(overrides || {}) as Promise<ControllerManager>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): ControllerManager {
    return super.attach(address) as ControllerManager;
  }
  override connect(signer: Signer): ControllerManager__factory {
    return super.connect(signer) as ControllerManager__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ControllerManagerInterface {
    return new utils.Interface(_abi) as ControllerManagerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ControllerManager {
    return new Contract(address, _abi, signerOrProvider) as ControllerManager;
  }
}
