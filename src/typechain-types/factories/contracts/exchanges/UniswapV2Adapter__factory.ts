/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  UniswapV2Adapter,
  UniswapV2AdapterInterface,
} from "../../../contracts/exchanges/UniswapV2Adapter";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "router",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "WETH",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amountIn",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amountOutMin",
        type: "uint256",
      },
      {
        internalType: "address[]",
        name: "path",
        type: "address[]",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "wrapped",
        type: "bool",
      },
    ],
    name: "swapExactTokensForTokens",
    outputs: [
      {
        internalType: "uint256",
        name: "amountOut",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "swapRouter",
    outputs: [
      {
        internalType: "contract IUniswapV2Router02",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amountOut",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amountInMax",
        type: "uint256",
      },
      {
        internalType: "address[]",
        name: "path",
        type: "address[]",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "wrapped",
        type: "bool",
      },
    ],
    name: "swapTokensForExactTokens",
    outputs: [
      {
        internalType: "uint256",
        name: "amountIn",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60c060405234801561001057600080fd5b50604051610f49380380610f4983398101604081905261002f916100af565b6001600160a01b0381166080819052604080516315ab88c960e31b8152905163ad5c4648916004808201926020929091908290030181865afa158015610079573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061009d91906100af565b6001600160a01b031660a052506100df565b6000602082840312156100c157600080fd5b81516001600160a01b03811681146100d857600080fd5b9392505050565b60805160a051610e0861014160003960008181607c0152818161016801526104eb01526000818160c80152818161012c0152818161021c0152818161031e01528181610414015281816104af0152818161059f01526106aa0152610e086000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80636e03efb514610051578063ad5c464814610077578063c31c9c07146100c3578063fa775c0f146100ea575b600080fd5b61006461005f366004610aa1565b6100fd565b6040519081526020015b60405180910390f35b61009e7f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161006e565b61009e7f000000000000000000000000000000000000000000000000000000000000000081565b6100646100f8366004610aa1565b610480565b60006101518686600081811061011557610115610b55565b905060200201602081019061012a9190610b84565b7f00000000000000000000000000000000000000000000000000000000000000008961077e565b73ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168686610195600182610ba6565b8181106101a4576101a4610b55565b90506020020160208101906101b99190610b84565b73ffffffffffffffffffffffffffffffffffffffff161480156101da575081155b156102e1576040517f8803dbee00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690638803dbee9061025b908b908b908b908b908b908b90600401610be4565b6000604051808303816000875af115801561027a573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526102c09190810190610c9e565b6000815181106102d2576102d2610b55565b602002602001015190506103df565b6040517f4a25d94a00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690634a25d94a9061035d908b908b908b908b908b908b90600401610be4565b6000604051808303816000875af115801561037c573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526103c29190810190610c9e565b6000815181106103d4576103d4610b55565b602002602001015190505b868110156104755761043a868660008181106103fd576103fd610b55565b90506020020160208101906104129190610b84565b7f0000000000000000000000000000000000000000000000000000000000000000600061077e565b6104758686600081811061045057610450610b55565b90506020020160208101906104659190610b84565b85610470848b610ba6565b6108f3565b979650505050505050565b60006104d48686600081811061049857610498610b55565b90506020020160208101906104ad9190610b84565b7f00000000000000000000000000000000000000000000000000000000000000008a61077e565b73ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168686610518600182610ba6565b81811061052757610527610b55565b905060200201602081019061053c9190610b84565b73ffffffffffffffffffffffffffffffffffffffff1614801561055d575081155b1561066d576040517f18cbafe500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016906318cbafe5906105de908b908b908b908b908b908b90600401610be4565b6000604051808303816000875af11580156105fd573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526106439190810190610c9e565b61064e600187610ba6565b8151811061065e5761065e610b55565b60200260200101519050610475565b6040517f38ed173900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016906338ed1739906106e9908b908b908b908b908b908b90600401610be4565b6000604051808303816000875af1158015610708573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160405261074e9190810190610c9e565b610759600187610ba6565b8151811061076957610769610b55565b60200260200101519050979650505050505050565b6040805173ffffffffffffffffffffffffffffffffffffffff8481166024830152604480830185905283518084039091018152606490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f095ea7b30000000000000000000000000000000000000000000000000000000017905291516000928392908716916108159190610d7a565b6000604051808303816000865af19150503d8060008114610852576040519150601f19603f3d011682016040523d82523d6000602084013e610857565b606091505b50915091508180156108815750805115806108815750808060200190518101906108819190610db5565b6108ec576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f5472616e7366657248656c7065723a20415050524f56455f4641494c4544000060448201526064015b60405180910390fd5b5050505050565b6040805173ffffffffffffffffffffffffffffffffffffffff8481166024830152604480830185905283518084039091018152606490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000179052915160009283929087169161098a9190610d7a565b6000604051808303816000865af19150503d80600081146109c7576040519150601f19603f3d011682016040523d82523d6000602084013e6109cc565b606091505b50915091508180156109f65750805115806109f65750808060200190518101906109f69190610db5565b6108ec576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5472616e7366657248656c7065723a205452414e534645525f4641494c45440060448201526064016108e3565b803573ffffffffffffffffffffffffffffffffffffffff81168114610a8057600080fd5b919050565b8015158114610a9357600080fd5b50565b8035610a8081610a85565b600080600080600080600060c0888a031215610abc57600080fd5b8735965060208801359550604088013567ffffffffffffffff80821115610ae257600080fd5b818a0191508a601f830112610af657600080fd5b813581811115610b0557600080fd5b8b60208260051b8501011115610b1a57600080fd5b602083019750809650505050610b3260608901610a5c565b925060808801359150610b4760a08901610a96565b905092959891949750929550565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600060208284031215610b9657600080fd5b610b9f82610a5c565b9392505050565b600082821015610bdf577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b500390565b868152602080820187905260a0604083018190528201859052600090869060c08401835b88811015610c415773ffffffffffffffffffffffffffffffffffffffff610c2e85610a5c565b1682529282019290820190600101610c08565b5073ffffffffffffffffffffffffffffffffffffffff96909616606085015250505060800152949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60006020808385031215610cb157600080fd5b825167ffffffffffffffff80821115610cc957600080fd5b818501915085601f830112610cdd57600080fd5b815181811115610cef57610cef610c6f565b8060051b6040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f83011681018181108582111715610d3257610d32610c6f565b604052918252848201925083810185019188831115610d5057600080fd5b938501935b82851015610d6e57845184529385019392850192610d55565b98975050505050505050565b6000825160005b81811015610d9b5760208186018101518583015201610d81565b81811115610daa576000828501525b509190910192915050565b600060208284031215610dc757600080fd5b8151610b9f81610a8556fea2646970667358221220e881cf98b2ae41bf12fc605f554f48c875ee8341ebeda31a3e43dadb44c0857364736f6c634300080d0033";

type UniswapV2AdapterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: UniswapV2AdapterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class UniswapV2Adapter__factory extends ContractFactory {
  constructor(...args: UniswapV2AdapterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    router: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<UniswapV2Adapter> {
    return super.deploy(router, overrides || {}) as Promise<UniswapV2Adapter>;
  }
  override getDeployTransaction(
    router: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(router, overrides || {});
  }
  override attach(address: string): UniswapV2Adapter {
    return super.attach(address) as UniswapV2Adapter;
  }
  override connect(signer: Signer): UniswapV2Adapter__factory {
    return super.connect(signer) as UniswapV2Adapter__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): UniswapV2AdapterInterface {
    return new utils.Interface(_abi) as UniswapV2AdapterInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): UniswapV2Adapter {
    return new Contract(address, _abi, signerOrProvider) as UniswapV2Adapter;
  }
}
